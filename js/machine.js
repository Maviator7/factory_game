// Ê©üÊ¢∞ÂÆöÁæ©„Å®Âá¶ÁêÜ„É≠„Ç∏„ÉÉ„ÇØ

// ÂÆöÊï∞
const GRID_SIZE = 40
const LEVELUP_COST = 100000 // ¬•100,000
const LEVEL_SPEED_BONUS = 0.5 // „É¨„Éô„É´2„Åß50%ÈÄüÂ∫¶Âêë‰∏ä

// ÊùêÊñô„Ç≥„Çπ„Éà
const materialCosts = {
  material: 1,  // ÂéüÊùêÊñô1ÂÄãÊ∂àË≤ª
  tire: 2,      // „Çø„Ç§„É§Ë£ΩÈÄ†„Å´ÊùêÊñô2ÂÄã
  engine: 3,    // „Ç®„É≥„Ç∏„É≥Ë£ΩÈÄ†„Å´ÊùêÊñô3ÂÄã  
  body: 2,      // „Éú„Éá„Ç£Ë£ΩÈÄ†„Å´ÊùêÊñô2ÂÄã
  seat: 1       // „Ç∑„Éº„ÉàË£ΩÈÄ†„Å´ÊùêÊñô1ÂÄã
}

// ÂõûËª¢„Éò„É´„Éë„ÉºÈñ¢Êï∞
function rotatePort(port, rotation) {
  const rotations = [
    {dx: port.dx, dy: port.dy}, // 0Â∫¶
    {dx: -port.dy, dy: port.dx}, // 90Â∫¶
    {dx: -port.dx, dy: -port.dy}, // 180Â∫¶
    {dx: port.dy, dy: -port.dx}  // 270Â∫¶
  ]
  return rotations[rotation]
}

// Ê©üÊ¢∞ÂÆöÁæ©Ôºà„É¨„Ç∑„ÉîÊÉÖÂ†±‰ªò„ÅçÔºâ
const machineTypes = {
  supplier: { 
    name: 'ÂéüÊùêÊñô‰æõÁµ¶', 
    emoji: 'üì¶', 
    color: '#8e44ad',
    processTime: 2000,
    outputs: ['material'],
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„ÅÆ„Åø
    inputPorts: [],
    recipe: 'ÊùêÊñô„ÇíÁÑ°ÈôêÁîüÊàêÔºàÊùêÊñô„Ç≥„Çπ„Éà: 1ÂÄã/ÂõûÔºâ'
  },
  conveyor: { 
    name: '„Ç≥„É≥„Éô„Ç¢', 
    emoji: 'üü∞', 
    color: '#7f8c8d',
    processTime: 0,
    outputs: ['any'],
    inputPorts: [{dx: -1, dy: 0}, {dx: 1, dy: 0}, {dx: 0, dy: -1}, {dx: 0, dy: 1}], // ÂõõÊñπÂêë„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫ÂäõÔºà„Éá„Éï„Ç©„É´„ÉàÔºâ
    recipe: '‰ªªÊÑè„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÈÅãÊê¨'
  },
  // Âü∫Êú¨Âä†Â∑•Ê©üÊ¢∞
  press: { 
    name: '„Éó„É¨„ÇπÊ©ü', 
    emoji: 'üî®', 
    color: '#e74c3c',
    processTime: 1500,
    inputs: ['material'],
    outputs: ['pressed'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'ÂéüÊùêÊñô ‚Üí „Éó„É¨„ÇπÊ∏à„ÅøÊùêÊñô'
  },
  welder: { 
    name: 'Ê∫∂Êé•Ê©ü', 
    emoji: '‚ö°', 
    color: '#f39c12',
    processTime: 1500,
    inputs: ['pressed', 'tire_pressed', 'engine_pressed', 'body_pressed'],
    outputs: ['welded'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: '„Éó„É¨„ÇπÊ∏à„ÅøÊùêÊñô ‚Üí Ê∫∂Êé•Ê∏à„ÅøÊùêÊñô'
  },
  painter: { 
    name: 'Â°óË£ÖÊ©ü', 
    emoji: 'üé®', 
    color: '#9b59b6',
    processTime: 1500,
    inputs: ['welded'],
    outputs: ['painted'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'Ê∫∂Êé•Ê∏à„ÅøÊùêÊñô ‚Üí Â°óË£ÖÊ∏à„ÅøÊùêÊñô'
  },
  // „Éë„Éº„ÉÑÂ∞ÇÁî®Âä†Â∑•Ê©üÊ¢∞
  tire_press: {
    name: '„Çø„Ç§„É§„Éó„É¨„Çπ',
    emoji: 'üõû',
    color: '#2c3e50',
    processTime: 2000,
    inputs: ['material'],
    outputs: ['tire_pressed'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'ÂéüÊùêÊñô ‚Üí „Çø„Ç§„É§Áî®„Éó„É¨„ÇπÊùêÊñô'
  },
  engine_press: {
    name: '„Ç®„É≥„Ç∏„É≥„Éó„É¨„Çπ',
    emoji: 'üîß',
    color: '#c0392b',
    processTime: 2500,
    inputs: ['material'],
    outputs: ['engine_pressed'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'ÂéüÊùêÊñô ‚Üí „Ç®„É≥„Ç∏„É≥Áî®„Éó„É¨„ÇπÊùêÊñô'
  },
  body_press: {
    name: '„Éú„Éá„Ç£„Éó„É¨„Çπ',
    emoji: 'üöó',
    color: '#16a085',
    processTime: 2000,
    inputs: ['material'],
    outputs: ['body_pressed'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'ÂéüÊùêÊñô ‚Üí „Éú„Éá„Ç£Áî®„Éó„É¨„ÇπÊùêÊñô'
  },
  // „Éë„Éº„ÉÑÂÆåÊàêÊ©üÊ¢∞
  tire_maker: {
    name: '„Çø„Ç§„É§Ë£ΩÈÄ†',
    emoji: 'üõû',
    color: '#34495e',
    processTime: 1500,
    inputs: ['welded'],
    outputs: ['tire'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'Ê∫∂Êé•Ê∏à„ÅøÊùêÊñô ‚Üí „Çø„Ç§„É§ÔºàËªä1Âè∞„Å´4ÂÄãÂøÖË¶ÅÔºâ'
  },
  engine_maker: {
    name: '„Ç®„É≥„Ç∏„É≥Ë£ΩÈÄ†',
    emoji: 'üîß',
    color: '#e74c3c',
    processTime: 2000,
    inputs: ['welded'],
    outputs: ['engine'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'Ê∫∂Êé•Ê∏à„ÅøÊùêÊñô ‚Üí „Ç®„É≥„Ç∏„É≥ÔºàËªä1Âè∞„Å´1ÂÄãÂøÖË¶ÅÔºâ'
  },
  body_maker: {
    name: '„Éú„Éá„Ç£Ë£ΩÈÄ†',
    emoji: 'üöó',
    color: '#1abc9c',
    processTime: 1800,
    inputs: ['welded'],
    outputs: ['body'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'Ê∫∂Êé•Ê∏à„ÅøÊùêÊñô ‚Üí „Éú„Éá„Ç£ÔºàËªä1Âè∞„Å´1ÂÄãÂøÖË¶ÅÔºâ'
  },
  seat_maker: {
    name: '„Ç∑„Éº„ÉàË£ΩÈÄ†',
    emoji: 'ü™ë',
    color: '#8e44ad',
    processTime: 1000,
    inputs: ['painted'],
    outputs: ['seat'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'Â°óË£ÖÊ∏à„ÅøÊùêÊñô ‚Üí „Ç∑„Éº„ÉàÔºàËªä1Âè∞„Å´4ÂÄãÂøÖË¶ÅÔºâ'
  },
  // Ê†ºÁ¥ç„Éú„ÉÉ„ÇØ„Çπ
  storage_box: {
    name: 'ÈÉ®ÂìÅÊ†ºÁ¥ç„Éú„ÉÉ„ÇØ„Çπ',
    emoji: 'üì¶',
    color: '#7f8c8d',
    processTime: 0,
    inputs: ['tire', 'engine', 'body', 'seat', 'pre_assembled', 'assembled'],
    outputs: [],
    inputPorts: [{dx: -1, dy: 0}, {dx: 1, dy: 0}, {dx: 0, dy: -1}, {dx: 0, dy: 1}], // ÂõõÊñπÂêë„Åã„ÇâÂÖ•Âäõ
    outputPorts: [], // Âá∫Âäõ„Å™„ÅóÔºàÊ†ºÁ¥çÂ∞ÇÁî®Ôºâ
    recipe: 'ÈÉ®ÂìÅ„ÇíÊ†ºÁ¥ç„Åó„Å¶Âú®Â∫´„Å®„Åó„Å¶‰øùÁÆ°'
  },
  parts_assembler: {
    name: 'ÈÉ®ÂìÅÁµÑÁ´ã',
    emoji: 'üî©',
    color: '#3498db',
    processTime: 3000,
    inputs: ['tire', 'engine', 'body', 'seat'],
    outputs: ['pre_assembled'],
    requiresAll: true,
    requiredCounts: { tire: 4, engine: 1, body: 1, seat: 4 },
    inputPorts: [{dx: -1, dy: 0}, {dx: 0, dy: -1}], // Â∑¶„ÄÅ‰∏ä„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: '„Çø„Ç§„É§√ó4 + „Ç®„É≥„Ç∏„É≥√ó1 + „Éú„Éá„Ç£√ó1 + „Ç∑„Éº„Éà√ó4 ‚Üí ÈÉ®ÂìÅÁµÑÁ´ãÂìÅ'
  },
  final_assembler: {
    name: 'ÊúÄÁµÇÁµÑÁ´ã',
    emoji: 'üè≠',
    color: '#27ae60',
    processTime: 4000,
    inputs: ['pre_assembled'],
    outputs: ['assembled'],
    requiresAll: false,
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [{dx: 1, dy: 0}], // Âè≥„Å´Âá∫Âäõ
    recipe: 'ÈÉ®ÂìÅÁµÑÁ´ãÂìÅ ‚Üí ÁµÑÁ´ãÊ∏à„ÅøËªä'
  },
  inspector: { 
    name: 'Ê§úÊüªÊ©ü', 
    emoji: 'üîç', 
    color: '#2ecc71',
    processTime: 1000,
    inputs: ['assembled'],
    outputs: ['finished'],
    inputPorts: [{dx: -1, dy: 0}], // Â∑¶„Åã„ÇâÂÖ•Âäõ
    outputPorts: [], // Âá∫Âäõ„Å™„ÅóÔºàÁµÇÁ´ØÔºâ
    recipe: 'ÁµÑÁ´ãÊ∏à„ÅøËªä ‚Üí ÂÆåÊàêËªäÔºàÂ£≤‰∏ä: ¬•250,000Ôºâ'
  }
}

// „É¨„Éô„É´„Å´Âøú„Åò„ÅüÂá¶ÁêÜÊôÇÈñì„ÇíÂèñÂæó
function getProcessTime(machine) {
  const baseTime = machineTypes[machine.type].processTime
  if (machine.level && machine.level >= 2) {
    return Math.round(baseTime * (1 - LEVEL_SPEED_BONUS))
  }
  return baseTime
}

// Ëá™ÂãïÊé•Á∂ö„Ç∑„Çπ„ÉÜ„É†ÔºàÂõûËª¢ÂØæÂøúÔºâ
function createAutoConnections(x, y) {
  const currentKey = `${x}-${y}`
  const currentMachine = machines.get(currentKey)
  if (!currentMachine) {return}
    
  const currentType = machineTypes[currentMachine.type]
    
  // Âá∫Âäõ„Éù„Éº„Éà„Åã„ÇâÊé•Á∂öÂÖà„ÇíÊé¢„ÅôÔºàÂõûËª¢ÈÅ©Áî®Ôºâ
  if (currentType.outputPorts) {
    currentType.outputPorts.forEach(originalPort => {
      const rotatedPort = rotatePort(originalPort, currentMachine.rotation)
      const {dx, dy} = rotatedPort
            
      const targetKey = `${x + dx}-${y + dy}`
      const targetMachine = machines.get(targetKey)
            
      if (targetMachine) {
        const targetType = machineTypes[targetMachine.type]
                
        // „Ç≥„É≥„Éô„Ç¢„ÅÆÂ†¥Âêà„ÅØÁâπÂà•Âá¶ÁêÜÔºàÂÖ®ÊñπÂêë„Åã„ÇâÂèó„ÅëÂÖ•„ÇåÔºâ
        if (targetMachine.type === 'conveyor') {
          // Êé•Á∂ö‰ΩúÊàê
          if (!connections.has(currentKey)) {
            connections.set(currentKey, [])
          }
          if (!connections.get(currentKey).includes(targetKey)) {
            connections.get(currentKey).push(targetKey)
          }
        } else {
          // „Åù„ÅÆ‰ªñ„ÅÆÊ©üÊ¢∞„ÅØÈÄöÂ∏∏„ÅÆÂÖ•Âäõ„Éù„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ
          if (targetType.inputPorts) {
            const hasMatchingInputPort = targetType.inputPorts.some(originalInputPort => {
              const rotatedInputPort = rotatePort(originalInputPort, targetMachine.rotation)
              return rotatedInputPort.dx === -dx && rotatedInputPort.dy === -dy
            })
                        
            if (hasMatchingInputPort) {
              // Êé•Á∂ö‰ΩúÊàê
              if (!connections.has(currentKey)) {
                connections.set(currentKey, [])
              }
              if (!connections.get(currentKey).includes(targetKey)) {
                connections.get(currentKey).push(targetKey)
              }
            }
          }
        }
      }
    })
  }
    
  // ÂÖ•Âäõ„Éù„Éº„Éà„Åã„ÇâÈÄÜÊñπÂêë„ÅÆÊé•Á∂ö„ÇíÊé¢„ÅôÔºàÂõûËª¢ÈÅ©Áî®Ôºâ
  if (currentType.inputPorts) {
    currentType.inputPorts.forEach(originalPort => {
      // „Ç≥„É≥„Éô„Ç¢„ÅÆÂ†¥Âêà„ÅØÂÖ®ÊñπÂêë„ÉÅ„Çß„ÉÉ„ÇØ
      if (currentMachine.type === 'conveyor') {
        const {dx, dy} = originalPort
        const sourceKey = `${x + dx}-${y + dy}`
        const sourceMachine = machines.get(sourceKey)
                
        if (sourceMachine) {
          const sourceType = machineTypes[sourceMachine.type]
                    
          if (sourceType.outputPorts) {
            const hasMatchingOutputPort = sourceType.outputPorts.some(originalOutputPort => {
              const rotatedOutputPort = rotatePort(originalOutputPort, sourceMachine.rotation)
              return rotatedOutputPort.dx === -dx && rotatedOutputPort.dy === -dy
            })
                        
            if (hasMatchingOutputPort) {
              // Êé•Á∂ö‰ΩúÊàê
              if (!connections.has(sourceKey)) {
                connections.set(sourceKey, [])
              }
              if (!connections.get(sourceKey).includes(currentKey)) {
                connections.get(sourceKey).push(currentKey)
              }
            }
          }
        }
      } else {
        // „Åù„ÅÆ‰ªñ„ÅÆÊ©üÊ¢∞„ÅØÈÄöÂ∏∏„ÅÆÂõûËª¢ÈÅ©Áî®
        const rotatedPort = rotatePort(originalPort, currentMachine.rotation)
        const {dx, dy} = rotatedPort
                
        const sourceKey = `${x + dx}-${y + dy}`
        const sourceMachine = machines.get(sourceKey)
                
        if (sourceMachine) {
          const sourceType = machineTypes[sourceMachine.type]
                    
          if (sourceType.outputPorts) {
            const hasMatchingOutputPort = sourceType.outputPorts.some(originalOutputPort => {
              const rotatedOutputPort = rotatePort(originalOutputPort, sourceMachine.rotation)
              return rotatedOutputPort.dx === -dx && rotatedOutputPort.dy === -dy
            })
                        
            if (hasMatchingOutputPort) {
              // Êé•Á∂ö‰ΩúÊàê
              if (!connections.has(sourceKey)) {
                connections.set(sourceKey, [])
              }
              if (!connections.get(sourceKey).includes(currentKey)) {
                connections.get(sourceKey).push(currentKey)
              }
            }
          }
        }
      }
    })
  }
}

// „Ç¢„Ç§„ÉÜ„É†Âèó„ÅëÂÖ•„ÇåÂèØËÉΩÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
function canAcceptItem(machine, itemType) {
  const machineType = machineTypes[machine.type]
    
  // „Ç≥„É≥„Éô„Ç¢„ÅØÂ∏∏„Å´Âèó„ÅëÂÖ•„ÇåÂèØËÉΩÔºà‰ªªÊÑè„ÅÆÊñπÂêë„Åã„ÇâÔºâ
  if (machine.type === 'conveyor') {
    return true
  }
    
  // Ê©üÊ¢∞„ÅåÂá¶ÁêÜ‰∏≠„ÅßÂú®Â∫´„ÅåÊ∫ÄÊùØ„ÅÆÂ†¥Âêà„ÅØÂèó„ÅëÂÖ•„Çå‰∏çÂèØ
  if (machine.processing && machine.inventory.length >= 5) {
    return false
  }
    
  // ÂÖ•Âäõ„Çø„Ç§„Éó„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  if (!machineType.inputs) {
    return false // ÂÖ•Âäõ„ÇíÂèó„Åë‰ªò„Åë„Å™„ÅÑÊ©üÊ¢∞
  }
    
  // ÈÅ©Âàá„Å™ÂÖ•Âäõ„Çø„Ç§„Éó„Åã„ÉÅ„Çß„ÉÉ„ÇØ
  return machineType.inputs.includes(itemType)
}

// Ë§áÊï∞ÂÖ•ÂäõÊ©üÊ¢∞„ÅÆÂá¶ÁêÜÂèØËÉΩÂà§ÂÆöÔºàÂú®Â∫´„Ç∑„Çπ„ÉÜ„É†ÂØæÂøúÔºâ
function canProcessMultipleInputs(machine, machineType) {
  if (!machineType.requiresAll || !machineType.inputs) {return false}
    
  // Âú®Â∫´„Åã„ÇâÂèñÂæó„Åô„ÇãÊ©üÊ¢∞„ÅÆÂ†¥Âêà
  if (machineType.useInventory && machineType.requiredCounts) {
    return Object.entries(machineType.requiredCounts).every(([partType, requiredCount]) => {
      return stats.inventory[partType] >= requiredCount
    })
  }
    
  // ÂøÖË¶ÅÂÄãÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà
  if (machineType.requiredCounts) {
    return Object.entries(machineType.requiredCounts).every(([partType, requiredCount]) => {
      const availableCount = machine.inventory.filter(item => item.type === partType).length
      return availableCount >= requiredCount
    })
  }
    
  // ÂæìÊù•„ÅÆ1ÂÄã„Åö„Å§„Ç∑„Çπ„ÉÜ„É†
  return machineType.inputs.every(inputType => {
    return machine.inventory.some(item => item.type === inputType)
  })
}

// Ê©üÊ¢∞Âá¶ÁêÜ
function processMachines(now) {
  for (const [key, machine] of machines) {
    const machineType = machineTypes[machine.type]
    const processTime = getProcessTime(machine) // „É¨„Éô„É´„Å´Âøú„Åò„ÅüÂá¶ÁêÜÊôÇÈñì
        
    // ‰æõÁµ¶Ê©ü„ÅÆÁâπÂà•Âá¶ÁêÜ
    if (machine.type === 'supplier') {
      if (now - machine.lastProduced > processTime) {
        // ÂéüÊùêÊñô„ÅåË∂≥„Çä„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        if (stats.materials >= materialCosts.material) {
          machine.lastProduced = now
          stats.materials -= materialCosts.material
                    
          // Êé•Á∂öÂÖà„Å´ÊùêÊñô„ÇíÈÄÅ„ÇãÔºàÂèó„ÅëÂÖ•„ÇåÂèØËÉΩÊÄß„ÉÅ„Çß„ÉÉ„ÇØ‰ªò„ÅçÔºâ
          if (connections.has(key)) {
            const targets = connections.get(key)
            targets.forEach(targetKey => {
              const targetMachine = machines.get(targetKey)
              if (targetMachine && canAcceptItem(targetMachine, 'material')) {
                createItem(machine.x, machine.y, targetMachine.x, targetMachine.y, 'material')
              }
            })
          }
        }
      }
    }
        
    // „Åù„ÅÆ‰ªñ„ÅÆÊ©üÊ¢∞„ÅÆÂá¶ÁêÜ
    if (machine.type !== 'supplier' && machine.type !== 'conveyor') {
      // Ë§áÊï∞ÂÖ•Âäõ„ÅåÂøÖË¶Å„Å™Ê©üÊ¢∞„ÅÆÂá¶ÁêÜ
      if (machineType.requiresAll) {
        if (!machine.processing && canProcessMultipleInputs(machine, machineType)) {
          machine.processing = true
          machine.processStart = now
          if (machineType.requiresAll && machineType.requiredCounts) {
            // Âú®Â∫´„Ç∑„Çπ„ÉÜ„É†„Çí‰ΩøÁî®„Åô„ÇãÂ†¥Âêà
            if (machineType.useInventory) {
              Object.entries(machineType.requiredCounts).forEach(([partType, requiredCount]) => {
                stats.inventory[partType] -= requiredCount
              })
            } else {
              // ÂøÖË¶ÅÂÄãÊï∞ÂàÜ„ÇíÊ∂àË≤ªÔºàÂá¶ÁêÜÈñãÂßãÊôÇÔºâ
              Object.entries(machineType.requiredCounts).forEach(([partType, requiredCount]) => {
                for (let i = 0; i < requiredCount; i++) {
                  const index = machine.inventory.findIndex(item => item.type === partType)
                  if (index !== -1) {
                    machine.inventory.splice(index, 1)
                  }
                }
              })
            }
          } else if (machineType.requiresAll) {
            // ÂæìÊù•„ÅÆ1ÂÄã„Åö„Å§„Ç∑„Çπ„ÉÜ„É†
            machineType.inputs.forEach(inputType => {
              const index = machine.inventory.findIndex(item => item.type === inputType)
              if (index !== -1) {
                machine.inventory.splice(index, 1)
              }
            })
          }
        }
      } else {
        // Âçò‰∏ÄÂÖ•Âäõ„ÅÆÊ©üÊ¢∞„ÅÆÂá¶ÁêÜ
        if (machine.inventory.length > 0 && !machine.processing) {
          const item = machine.inventory[0]
          if (machineType.inputs && machineType.inputs.includes(item.type)) {
            machine.processing = true
            machine.processStart = now
          }
        }
      }
            
      // Âá¶ÁêÜÂÆå‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØÔºà„É¨„Éô„É´„Å´Âøú„Åò„ÅüÂá¶ÁêÜÊôÇÈñì„Çí‰ΩøÁî®Ôºâ
      if (machine.processing && now - machine.processStart > processTime) {
        machine.processing = false
                
        if (!machineType.requiresAll) {
          machine.inventory.shift() // Âçò‰∏ÄÂÖ•Âäõ„ÅÆÂ†¥Âêà„ÅÆ„Åø
        }
        // Ë§áÊï∞ÂÖ•Âäõ„ÅÆÂ†¥Âêà„ÅØÂá¶ÁêÜÈñãÂßãÊôÇ„Å´Êó¢„Å´Ê∂àË≤ªÊ∏à„Åø
                
        if (machineType.outputs) {
          const outputType = machineType.outputs[0]
                    
          // ÁîüÁî£ÂÆüÁ∏æ„ÇíË®òÈå≤
          if (['tire', 'engine', 'body', 'seat'].includes(outputType)) {
            stats.totalProduced[outputType]++
          }
                    
          // Ê§úÊüªÊ©ü„ÅÆÂ†¥Âêà„ÅØÂÆåÊàêËªä„Å®„Åó„Å¶Âá¶ÁêÜ
          if (machine.type === 'inspector') {
            stats.cars++
            stats.revenue += 250000 // È´ò‰æ°ÂÄ§„ÅÆÂÆåÊàêËªä
          } else {
            // Êé•Á∂öÂÖà„Å´ÈÄÅ„Çã
            if (connections.has(key)) {
              const targets = connections.get(key)
              targets.forEach(targetKey => {
                const targetMachine = machines.get(targetKey)
                if (targetMachine) {
                  createItem(machine.x, machine.y, targetMachine.x, targetMachine.y, outputType)
                }
              })
            }
          }
        }
      }
    }
  }
}